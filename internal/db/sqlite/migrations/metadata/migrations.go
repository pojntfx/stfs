package metadata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _db_sqlite_migrations_metadata_1637447083_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x73\xdb\x36\x13\x3e\xbf\xfe\x15\x3b\xb9\xc4\x9e\x57\xd4\xb9\x93\x4c\x0f\x6e\x9c\x38\x9e\x89\x9d\x8c\x62\x35\x39\x06\x24\x96\x24\x2a\x10\x8b\x2e\x40\xc9\xcc\xaf\xef\x2c\x40\xca\xb2\x64\xc9\xe9\xf4\x24\x0a\xd8\xe7\xd9\xef\x5d\x14\x05\xfc\xbf\x33\x0d\xab\x88\xb0\xf4\x67\x15\xa3\x7c\x45\x55\x5a\x84\x16\x95\x46\x0e\x70\x7e\x06\x00\x50\x14\xb0\xc0\x8a\x58\x03\xd5\x10\x5b\x13\xc6\x7b\x20\x07\xb1\x15\x8c\xc7\x24\xc8\x59\xca\xb8\x88\x0d\x32\x38\x8a\xe0\x7a\x6b\x67\xcf\xb1\x20\x58\x15\x22\xf4\x5e\x8b\xda\x89\xf0\x34\xbf\x20\x56\x8e\x36\xee\x25\x45\x7f\x58\xaa\x56\xfb\x6c\x26\xb3\x65\x6c\x92\x2c\x93\xd8\xaf\xb0\xfc\x8a\xb5\x87\xfc\x5b\x7b\x5f\x50\x74\x53\x43\xc0\x38\x4b\xf0\x91\xac\x55\x01\x4a\x44\x07\x1a\x2d\x46\xd4\x29\x16\xca\xe3\x0c\xca\x3e\xc2\x8f\xbd\x48\xfc\x00\xe5\xf4\xce\x69\xd2\xf7\x03\x14\x23\x84\x68\xac\x15\x53\x19\x2d\xae\x95\xab\x72\x28\x27\xda\xa3\x36\xdd\x0f\x1e\x6b\xab\x1a\x30\x21\x27\x61\xf0\x28\x34\xa3\x7d\xe8\x22\x0f\xf3\xad\x70\x8b\xf0\x13\x99\x60\xad\x6c\x8f\x02\x51\x7d\xa4\x4e\x45\x53\x29\x6b\x07\xf0\x4c\x1d\x89\xba\x48\x80\x26\xb6\xc8\x89\x7f\x81\x0d\x50\xfe\xbc\x32\x3c\x91\x69\xf4\xe8\xb4\x71\xcd\x94\x7f\xcf\x18\xd0\x55\x49\xbd\x82\xc8\xca\x58\xb9\x0d\x56\x85\x56\xa2\x7e\xa7\x3a\xcc\xa6\xc4\xad\xd1\xc7\xdc\x12\x59\xe1\xa9\x8d\xc5\xec\x44\xba\x71\x72\x1c\xf1\x21\x6e\x11\xe0\xd9\x74\x8a\x07\x58\xe1\xf0\x18\x14\xc5\x0d\xc6\x2c\x4d\x35\x58\xe3\x56\x70\xbe\x56\xd6\x68\xa8\x47\x47\x3e\xc9\xd9\xf8\xfd\x75\xe8\x44\xe4\x62\x82\xcb\x9f\x43\x4d\x33\xb9\xfa\x70\xf3\xfd\xf6\xfd\x1b\xf8\xa8\x9c\xb6\xb8\x15\x9c\x80\x9f\xa8\x91\x48\x66\xab\x83\xf9\x89\xe2\x76\x39\x44\x0c\x49\x62\x3c\x39\xe2\xf2\x17\xe4\xce\x84\x60\xc8\xa5\x2a\xe9\x48\x23\x94\x26\x66\x68\xfa\x77\x14\xba\x0c\xc8\x70\x73\x25\xbe\xd2\xc6\x61\x4e\x51\x6f\x4e\x94\xcd\x35\x53\xef\x0f\x20\xcd\x29\x48\x52\x32\x85\x74\x47\xcd\x33\x91\x7a\xaa\xe5\x10\xd3\x9c\xc0\xdc\xe4\x3e\xfe\x40\xdc\xa9\x28\x25\xda\xbb\xe0\xb1\x32\xb5\x41\x9d\x5a\xcf\xc1\x37\x36\x11\x79\x9e\x7e\x3e\xe6\x3a\x67\xea\x9d\x0e\x70\x4b\xfa\xde\x3c\xe6\x23\x52\xe2\x72\xa8\x18\x43\x84\x80\x15\x39\x9d\xa2\x6b\x1a\x47\x8c\xb9\x65\x2e\xab\x0a\x43\x10\x5c\xba\x7a\xd7\x2a\xd7\x60\xfa\x5b\x1b\xb4\x3a\x4c\xed\xb3\xad\x2e\x82\x3e\x3c\x81\x11\xef\xa0\x66\x90\xed\x1d\x76\xfd\x50\x01\xbe\x5c\x7e\x17\xc1\xeb\xbb\xe5\x7c\x8f\x29\xf4\x65\x31\xda\xc6\x18\xc8\xf6\xd1\x90\x3b\x41\xb3\xc5\xdf\x92\x36\xb5\xa9\x94\xc8\x43\x9c\x1c\xef\x48\xcb\x37\xa4\x19\x78\x10\xdf\x6c\x76\x92\x86\x73\xc6\xbf\x7b\x23\x71\x18\xbb\xfd\xd1\x46\x08\xbd\xf7\xc4\x31\x37\x85\x4a\xa0\x13\xac\xd9\xfd\x7f\xc9\x5a\x25\xd0\x09\xd6\x5b\xf5\x17\x31\x68\x5c\x9b\x0a\xc1\xf5\x5d\x89\xbc\xdf\xc7\xef\x5a\xc5\x53\x1f\xa7\x45\x70\x31\xce\xcd\x75\x97\xc0\x47\xcb\xf9\xd6\xb8\xff\xc0\x9d\xc0\xc7\x5b\xf9\xf2\x7b\xde\xa1\x21\xcd\x58\xe8\x94\x97\x06\x90\x38\xe0\x43\x44\xa7\x51\x4f\x03\x3a\x2f\x86\x83\x1a\x93\x66\x2b\x34\xd6\xc6\xa1\x9e\x64\x20\xb4\xd4\x5b\x0d\xad\x5a\xa3\x8c\xbb\x30\xed\xbc\x9a\xac\xa5\x8d\xcc\xda\x9a\xb8\x7b\x33\x72\xfc\xef\xcf\xf7\x77\x57\x9f\x17\xf3\x15\x0e\x9b\x69\xd3\x15\x05\x7c\x6b\x91\x11\xf2\x9d\x58\x17\xa8\xc3\xd4\xa2\xc1\xab\x2a\x0d\x2c\x65\x2d\xf4\xde\x23\x57\x2a\xe0\x2c\xf5\xc4\xc8\x01\x9d\x1a\x26\x1e\x71\xba\x22\x17\xd5\xb8\x4f\x5f\xff\xfe\x5a\x12\xca\xaa\x8a\x12\x49\x9c\x37\xf3\x19\xbc\xba\xfe\xfc\xe9\xf2\xee\x7a\xee\x57\xcd\x7c\x8d\x2c\xc3\xed\xd5\xc5\x93\x75\xb4\xc2\x21\x69\xc8\x1b\x69\xf4\xb0\x94\x5a\x70\x05\x76\x3e\x0e\xb0\xbc\xff\x50\xfc\x06\x21\xb2\x71\xcd\x41\x9c\xbe\x1d\x99\x07\x26\x80\xac\x34\x19\x19\x12\xf5\x29\x82\x1a\xd9\xac\x51\x43\xcd\xd4\x89\xd5\x13\x0d\xa5\x3a\xcd\xed\x2e\x21\x18\x59\xa2\x5a\xa5\xb5\x56\xa1\xce\x8b\x6d\x9d\xab\x79\xb1\x9b\x34\xaf\x1e\x26\xfa\xe7\x27\xda\xd8\xbb\xd3\x14\x0b\x63\xce\xd2\xe1\x98\xc1\xa8\x78\x2c\x88\x83\x61\x23\x2f\x17\x49\x13\x46\x28\x07\x58\x64\xa1\x3b\x51\xa4\xa4\xb4\x4a\x0c\xb1\xc0\xba\x26\x8e\xd0\xf4\xd2\xd9\x2a\xee\x28\xd8\xc6\xfa\xab\x11\x07\xe4\x22\x53\x80\x35\x25\x72\xda\xfa\x8c\x4a\x4f\x75\x40\xae\xa8\xa8\xf3\xd6\x28\x17\xd3\x1a\x0b\x5b\x37\x4c\x9a\xc6\x9e\x42\x30\xf2\xf6\x94\x26\x49\xcf\xaa\x48\x92\xaf\xec\xe4\xd2\xa5\x77\xcd\xbe\x13\x37\xf5\xae\xcf\x4f\x67\x3a\x6c\x5e\x4c\xe1\x76\x9c\x8b\xa4\x89\x32\x33\xc7\x20\x1a\x0e\x71\xa2\x3d\x1f\x0b\x91\x78\x7c\xf4\x2d\xbf\xde\x5f\x2e\x52\xfe\x67\x32\x7b\xb6\xeb\xbd\x52\x3e\xbd\x9e\xa9\x06\x74\x15\xa5\x27\x4c\xf2\x64\x54\x7c\x1e\x70\xf2\x67\xac\xd5\xc9\xf0\xbd\x7e\x3f\xbb\x78\x7b\xb6\xfb\x3c\xbf\xa2\x8d\x3b\xd3\x4c\xfe\xe9\xf3\xfc\xed\x3f\x01\x00\x00\xff\xff\xf3\xc7\xc5\x5e\xc3\x0b\x00\x00")

func db_sqlite_migrations_metadata_1637447083_sql() ([]byte, error) {
	return bindata_read(
		_db_sqlite_migrations_metadata_1637447083_sql,
		"../../db/sqlite/migrations/metadata/1637447083.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../../db/sqlite/migrations/metadata/1637447083.sql": db_sqlite_migrations_metadata_1637447083_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"..": &_bintree_t{nil, map[string]*_bintree_t{
			"db": &_bintree_t{nil, map[string]*_bintree_t{
				"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
					"migrations": &_bintree_t{nil, map[string]*_bintree_t{
						"metadata": &_bintree_t{nil, map[string]*_bintree_t{
							"1637447083.sql": &_bintree_t{db_sqlite_migrations_metadata_1637447083_sql, map[string]*_bintree_t{
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}
